#!/bin/bash

control_c()
# example cleanup function
{
    rm -f $BACKUP_LOCATION/backup.lock
    exit
}


trap control_c SIGINT

# Which directories to backup
declare -a DIRECTORIES_FROM=( \
    /etc
    /home/ben/Photos
    /home/ben/Music
    /home/ben/VirtualBox*
    /home/ben/.openvpn
    /home/ben/.rtorrent.rc
    /home/ben/.config
    /home/ben/.xmo*
    /home/ben/.xsession
    /home/ben/.Xclients
    /home/ben/.vim/
    /home/ben/.TrueCrypt/
    /home/ben/.thunderbird/
    /home/ben/.ssh/
    /home/ben/.pam_mount.conf.xml
    /home/ben/.oh-my-zsh/
    /home/ben/.netrc
    /home/ben/.muttrc
    /home/ben/.mutt/
    /home/ben/.mcabber/
    /home/ben/.irssi/
    /home/ben/.gnupg/
    /home/ben/.asoundrc
)

# Where to backup starting from BACKUP_LOCATION
# If / then it will be backuped at root of BACKUP_LOCATION
declare -a DIRECTORIES_TO=( \
    /
    /
    /
    /
    home_conf/
    home_conf/
    home_conf/
    home_conf/
    home_conf/
    home_conf/
    home_conf/
    home_conf/
    home_conf/
    home_conf/
    home_conf/
    home_conf/
    home_conf/
    home_conf/
    home_conf/
    home_conf/
    home_conf/
    home_conf/
    home_conf/
    home_conf/
)

if [ -z "$1" ]; then
    BACKUP_LOCATION="/media/Backup/"
else
    BACKUP_LOCATION=$1
fi

COMMAND="/usr/bin/rsync"

PARAMS="-rpt --delete --stats"

# Check if device is available
touch $BACKUP_LOCATION > /dev/null

if [[ $? -ne 0 ]];then
    echo "Device mounted but not available";
    exit
fi

if (( ${#DIRECTORIES_TO[@]} != ${#DIRECTORIES_FROM[@]} ));then
    echo "From and to array size differ"
    exit
fi

if [ -f $BACKUP_LOCATION/backup.lock ];then
    echo "Backup already in progress or crashed";
    cat $BACKUP_LOCATION/backup.lock
    echo "Trying to recover..."
    PID=$(cat $BACKUP_LOCATION/backup.lock | grep PID | awk '{print $2}')
    ALIVE=$(ps ax | grep $PID | grep -v grep)
    if [[ $ALIVE != "" ]];then
        echo "Backup in progress... Aborting"
        exit
    fi
    echo "Backup restarted"
fi

if [[ $EUID -ne 0 ]]; then
    echo "You must be root"
    exit
else
    # Create lock file
    echo "BACKUP STARTED @ $(date)." >$BACKUP_LOCATION/backup.lock
    echo "PID: $$" >> $BACKUP_LOCATION/backup.lock

    if [ -d $directory ];then
        j=0
        for i in "${DIRECTORIES_FROM[@]}"
        do
            echo "Synchronizing directory $i with $BACKUP_LOCATION/${DIRECTORIES_TO[$j]}"
            $COMMAND $PARAMS $i $BACKUP_LOCATION/${DIRECTORIES_TO[$j]}
            j=$j+1
        done

        pacman -Q > $BACKUP_LOCATION/pacman_installed.txt

        # Delete lock file
        rm -f $BACKUP_LOCATION/backup.lock

    else
        echo "Backup location not found.. Aborting..."
    fi
fi

